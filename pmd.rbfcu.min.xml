<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="pmd.rbfcu.rules">
    <description>RBFCU Default PMD Ruleset</description>

	<rule ref="rulesets/java/basic.xml" />
	<rule ref="rulesets/java/codesize.xml">
		<exclude name="ExcessiveParameterList" />
		<exclude name="CyclomaticComplexity" />
		<exclude name="TooManyMethods" />
	</rule>
	<rule ref="rulesets/java/coupling.xml">
		<exclude name="LoosePackageCoupling" /><!-- requires specific packages and classes to be assigned to rule -->
		<exclude name="LawOfDemeter" /><!-- this is way too strict, impossible to implement on any project -->
	</rule>
	<rule ref="rulesets/java/unusedcode.xml" />

    <rule class="net.sourceforge.pmd.lang.rule.XPathRule" message="Avoid really long parameter lists" name="ExcessiveParameterListWarn" language="java">
        <description>
Long parameter lists can indicate that a new object should be created to
 wrap the numerous parameters.  Basically, try to group the parameters together.
      </description>
        <example><![CDATA[

public class Foo {
 public void addData(
  int p0, int p1, int p2, int p3, int p4, int p5,
  int p5, int p6, int p7, int p8, int p9, int p10) {
  }
 }
}

      ]]></example>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
    
//ClassOrInterfaceDeclaration[count(ExtendsList) = 0 and count(ImplementsList) = 0 and not(ends-with(@Image,'Validator'))]//MethodDeclaration[count(MethodDeclarator/FormalParameters/FormalParameter) = 3]
 
             ]]></value>
            </property>
        </properties>
	</rule>

    <rule class="net.sourceforge.pmd.lang.rule.XPathRule" message="Avoid really long parameter lists" name="ExcessiveParameterListHigh" language="java">
        <description>
Long parameter lists can indicate that a new object should be created to
 wrap the numerous parameters.  Basically, try to group the parameters together.
      </description>
        <example><![CDATA[

public class Foo {
 public void addData(
  int p0, int p1, int p2, int p3, int p4, int p5,
  int p5, int p6, int p7, int p8, int p9, int p10) {
  }
 }
}

      ]]></example>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
    
//ClassOrInterfaceDeclaration[count(ExtendsList) = 0 and count(ImplementsList) = 0 and not(ends-with(@Image,'Validator'))]//MethodDeclaration[count(MethodDeclarator/FormalParameters/FormalParameter) > 3]
 
             ]]></value>
            </property>
        </properties>
    </rule>

    <rule class="net.sourceforge.pmd.lang.java.rule.codesize.CyclomaticComplexityRule" message="The {0} ''{1}'' has a Cyclomatic Complexity of {2}." name="CyclomaticComplexityHigh">
        <description>
Complexity is determined by the number of decision points in a method plus one for the
method entry.  The decision points are 'if', 'while', 'for', and 'case labels'.  Generally,
1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity,
 and 11+ is very high complexity.
   </description>
        <example><![CDATA[

// Cyclomatic Complexity = 12
public class Foo {
1   public void example()  {
2       if (a == b)  {
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n < h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}

   ]]></example>
        <priority>3</priority>
        <properties>
            <property name="reportLevel" value="8" />
			<property name="showClassesComplexity" description="Indicate if class average violation should be added to the report" value="true" /> 
			<property name="showMethodsComplexity" description="Indicate if class average violation should be added to the report" value="true" /> 
        </properties>
	</rule>

    <rule class="net.sourceforge.pmd.lang.java.rule.codesize.CyclomaticComplexityRule" message="The {0} ''{1}'' has a Cyclomatic Complexity of {2}." name="CyclomaticComplexityVeryHigh">
        <description>
Complexity is determined by the number of decision points in a method plus one for the
method entry.  The decision points are 'if', 'while', 'for', and 'case labels'.  Generally,
1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity,
 and 11+ is very high complexity.
   </description>
        <example><![CDATA[

// Cyclomatic Complexity = 12
public class Foo {
1   public void example()  {
2       if (a == b)  {
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n < h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}

   ]]></example>
        <priority>2</priority>
        <properties>
            <property name="reportLevel" value="11" />
			<property name="showClassesComplexity" description="Indicate if class average violation should be added to the report" value="true" /> 
			<property name="showMethodsComplexity" description="Indicate if class average violation should be added to the report" value="true" /> 
        </properties>
    </rule>	

    <rule class="net.sourceforge.pmd.lang.rule.XPathRule" message="This class has too many methods, consider refactoring it." name="TooManyNonTestMethods" language="java">
        <description>
			A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.
        </description>
        <example></example>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
    
//ClassOrInterfaceDeclaration/ClassOrInterfaceBody[count(descendant::ClassOrInterfaceBodyDeclaration[not(descendant::MarkerAnnotation/Name[@Image='Test']) and descendant::MethodDeclarator[not(starts-with(@Image, 'get') or starts-with(@Image, 'set'))]]) > 10]
 
             ]]></value>
            </property>
        </properties>
    </rule>
</ruleset>
